#=================================================
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: P3TERX
# Blog: https://p3terx.com
#=================================================

name: Build bcm27xx/bcm2711 openwrt 23

on:
  workflow_dispatch:
#  schedule:
#    - cron: 0 17 * * *
#  watch:
#    types: started

env:
  CONFIG_FILE: config/rpi/rpi4-target.config
  SOURCE_URL: https://github.com/immortalwrt/immortalwrt
  SOURCE_BRANCH: openwrt-23.05
  DIY_SH: scripts/custom.sh
  TOOLCHAIN_TAG: toolchain
  CLASH_BINARY_PLATFORM: arm64
  SPEEDTEST_CLI_BINARY: aarch64
  TOOLCHAIN_RELEASE_UPLOAD: true
  FIRMWARE_RELEASE_UPLOAD: true
  WEB_ROOT_PATH: /data/www/openwrt.cc
  TZ: Asia/Jakarta

jobs:
  Build:
    runs-on: ubuntu-20.04

    steps:
      - name: Restore Variables
        run: |
          echo "CURRENT_BRANCH=main" >> $GITHUB_ENV
          echo "OPENWRT_ROOT_PATH=/home/runner/work/BashSupn-WRT/BashSupn-WRT/workspace/openwrt" >> $GITHUB_ENV
          echo "SOURCE_OWNER=immortalwrt" >> $GITHUB_ENV
          echo "SOURCE_REPO=immortalwrt" >> $GITHUB_ENV
          echo "DEVICE_PLATFORM=aarch64_cortex-a53" >> $GITHUB_ENV
          echo "DEVICE_TARGET=bcm27xx" >> $GITHUB_ENV
          echo "DEVICE_SUBTARGET=bcm2710" >> $GITHUB_ENV
          echo "TOOLCHAIN_IMAGE=toolchain-immortalwrt-immortalwrt-openwrt-23.05-bcm27xx-bcm2710" >> $GITHUB_ENV

      - name: Initialization Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install rdate squashfs-tools $(curl -fsSL git.io/depends-ubuntu-2004)
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo ln -sf /usr/share/zoneinfo/Asia/Jakarta /etc/localtime
          docker image prune -a -f

      - name: Combine Disks
        run: |
          sudo swapoff -a
          sudo rm -f /mnt/swapfile
          export ROOT_FREE_KB=$(df --block-size=1024 --output=avail / | tail -1)
          export ROOT_LOOP_KB=$(expr $ROOT_FREE_KB - 1048576)
          export ROOT_LOOP_BYTES=$(expr $ROOT_LOOP_KB \* 1024)
          sudo fallocate -l $ROOT_LOOP_BYTES /root.img
          export ROOT_LOOP_DEVNAME=$(sudo losetup -Pf --show /root.img)
          sudo pvcreate -f $ROOT_LOOP_DEVNAME
          export MNT_FREE_KB=$(df --block-size=1024 --output=avail /mnt | tail -1)
          export MNT_LOOP_KB=$(expr $MNT_FREE_KB - 102400)
          export MNT_LOOP_BYTES=$(expr $MNT_LOOP_KB \* 1024)
          sudo fallocate -l $MNT_LOOP_BYTES /mnt/mnt.img
          export MNT_LOOP_DEVNAME=$(sudo losetup -Pf --show /mnt/mnt.img)
          sudo pvcreate -f $MNT_LOOP_DEVNAME
          sudo vgcreate vgstorage $ROOT_LOOP_DEVNAME $MNT_LOOP_DEVNAME
          sudo lvcreate -n lvstorage -l 100%FREE vgstorage
          export LV_DEVNAME=$(sudo lvscan | awk -F "'" '{print $2}')
          sudo mkfs.btrfs -L combinedisk $LV_DEVNAME
          sudo mount -o compress=zstd $LV_DEVNAME $GITHUB_WORKSPACE
          sudo chown -R runner:runner $GITHUB_WORKSPACE
          mkdir $GITHUB_WORKSPACE/tmp
          chmod 777 $GITHUB_WORKSPACE/tmp
          sudo cp -rp /tmp/* $GITHUB_WORKSPACE/tmp
          sudo mount -B $GITHUB_WORKSPACE/tmp /tmp
          df -hT $GITHUB_WORKSPACE
          sudo btrfs filesystem usage $GITHUB_WORKSPACE

      - name: Checkout
        run: |
          cd $GITHUB_WORKSPACE
          git init
          git remote add origin https://github.com/$GITHUB_REPOSITORY
          git fetch
          BRANCH_NAME=${CURRENT_BRANCH:-main}
          git checkout -t origin/$BRANCH_NAME

      - name: Prepare Toolchain Image Form Releases
        if: env.TOOLCHAIN_RELEASE_UPLOAD == 'true'
        run: |
          mkdir -p workspace
          cd workspace
          for i in {0..9}
          do
            curl -fsL https://github.com/$GITHUB_REPOSITORY/releases/download/$TOOLCHAIN_TAG/$TOOLCHAIN_IMAGE.img.0$i >> $TOOLCHAIN_IMAGE.img || break
          done
          mkdir openwrt-ro openwrt workdir overlay
          sudo mount -o loop $TOOLCHAIN_IMAGE.img openwrt-ro
          sudo mount -t overlay overlay -o lowerdir=openwrt-ro,upperdir=overlay,workdir=workdir openwrt
          cd $OPENWRT_ROOT_PATH
          git pull

      - name: Install Feeds
        run: |
          cd $OPENWRT_ROOT_PATH
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Load Custom Configuration
        run: |
          [ -e files ] && mv files $OPENWRT_ROOT_PATH/files
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE $OPENWRT_ROOT_PATH/.config
          cat config/universal.config >> $OPENWRT_ROOT_PATH/.config
          cat config/rpi-extra.config >> $OPENWRT_ROOT_PATH/.config
          cd $OPENWRT_ROOT_PATH
          chmod +x $GITHUB_WORKSPACE/scripts/*.sh
          $GITHUB_WORKSPACE/$DIY_SH
          $GITHUB_WORKSPACE/scripts/preset-clash-core.sh $CLASH_BINARY_PLATFORM
          $GITHUB_WORKSPACE/scripts/preset-terminal-tools.sh
          $GITHUB_WORKSPACE/scripts/preset-speedtest-cli.sh $SPEEDTEST_CLI_BINARY
          make defconfig

      - name: Download DL Package
        id: download
        run: |
          cd $OPENWRT_ROOT_PATH
          make download -j64

      - name: Compile Packages
        run: |
          cd $OPENWRT_ROOT_PATH
          echo -e "$(nproc) thread compile"
          make buildinfo
          make diffconfig buildversion feedsversion
          make target/compile -j$(nproc) IGNORE_ERRORS="m n" BUILD_LOG=1 || \
          yes n | make target/compile -j64 V=s IGNORE_ERRORS=1
          make package/compile -j$(nproc) IGNORE_ERRORS=1 || make package/compile j64 V=s IGNORE_ERRORS=1
          make package/index

      - name: Generate Firmware
        id: generate
        run: |
          if grep -q $DEVICE_TARGET/$DEVICE_SUBTARGET $GITHUB_WORKSPACE/data/support-targets.txt; then
            mkdir -p $OPENWRT_ROOT_PATH/files/etc/opkg
            cd $OPENWRT_ROOT_PATH/files/etc/opkg
            cp $GITHUB_WORKSPACE/data/opkg/distfeeds.conf .
            sed -i "s/DEVICE_SUBTARGET/$DEVICE_SUBTARGET/g" distfeeds.conf
            sed -i "s/DEVICE_TARGET/$DEVICE_TARGET/g" distfeeds.conf
            sed -i "s/DEVICE_PLATFORM/$DEVICE_PLATFORM/g" distfeeds.conf
            cd $OPENWRT_ROOT_PATH
            git clone https://git.openwrt.org/project/usign.git
            cd usign
            cmake .
            make
            sudo mv usign /bin
            mkdir -p $OPENWRT_ROOT_PATH/files/etc/opkg/keys
            cd $OPENWRT_ROOT_PATH/files/etc/opkg/keys
            wget -q https://openwrt.cc/keys/key-build.pub
            mv key-build.pub $(usign -F -p key-build.pub)
          fi
          cd $OPENWRT_ROOT_PATH
          echo "dtparam=i2c_arm=on,audio=on" >> target/linux/bcm27xx/image/config.txt
          mkdir -p files/etc/uci-defaults/
          cp $GITHUB_WORKSPACE/scripts/init-settings.sh files/etc/uci-defaults/99-init-settings
          mkdir -p files/www/snapshots
          cp -r bin/targets files/www/snapshots
          make package/install -j$(nproc) || make package/install -j4 V=s
          make target/install -j$(nproc) || make target/install -j4 V=s
          make json_overview_image_info
          make checksum

      - name: Print Sha256sums
        run: |
          cd $OPENWRT_ROOT_PATH/bin/targets/$DEVICE_TARGET/$DEVICE_SUBTARGET
          cat sha256sums

      - name: Compress Bin Folder
        run: |
          cd $OPENWRT_ROOT_PATH
          zip -r $DEVICE_TARGET-$DEVICE_SUBTARGET.zip bin

      - name: Print Disk Usage
        if: always()
        run: |
          echo 'lsblk -f'
          lsblk -f
          echo '-----'
          echo 'df -h'
          df -h
          echo '-----'
          echo 'btrfs filesystem usage'
          sudo btrfs filesystem usage $GITHUB_WORKSPACE
          echo '-----'

      - name: Upload Bin Archive
        uses: actions/upload-artifact@main
        with:
          name: bin-archive
          path: ${{ env.OPENWRT_ROOT_PATH }}/${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}.zip

  Upload:
    needs: [Build]
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Restore Variables
        run: |
          echo "CURRENT_BRANCH=main" >> $GITHUB_ENV
          echo "OPENWRT_ROOT_PATH=/home/runner/work/BashSupn-WRT/BashSupn-WRT/workspace/openwrt" >> $GITHUB_ENV
          echo "SOURCE_OWNER=immortalwrt" >> $GITHUB_ENV
          echo "SOURCE_REPO=immortalwrt" >> $GITHUB_ENV
          echo "DEVICE_PLATFORM=aarch64_cortex-a53" >> $GITHUB_ENV
          echo "DEVICE_TARGET=bcm27xx" >> $GITHUB_ENV
          echo "DEVICE_SUBTARGET=bcm2710" >> $GITHUB_ENV
          echo "TOOLCHAIN_IMAGE=toolchain-immortalwrt-immortalwrt-openwrt-23.05-bcm27xx-bcm2710" >> $GITHUB_ENV

      - name: Initialization Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install zip unzip rsync
          sudo ln -sf /usr/share/zoneinfo/Asia/Jakarta /etc/localtime

      - name: Download Bin Archive
        uses: actions/download-artifact@v2
        with:
          name: bin-archive
          path: ${{ env.OPENWRT_ROOT_PATH }}

      - name: Decompress Bin Archive
        run: |
          cd $OPENWRT_ROOT_PATH
          unzip $DEVICE_TARGET-$DEVICE_SUBTARGET.zip

      - name: Organize Files
        run: |
          export BUILD_DATE=$(date +"%Y-%m-%d")
          echo "BUILD_DATE=$BUILD_DATE" >> $GITHUB_ENV
          cd $OPENWRT_ROOT_PATH/bin/targets/$DEVICE_TARGET/$DEVICE_SUBTARGET
          rm -rf packages
          find . -type f -name 'immortalwrt-*' | while read FILE ; do
            newfile="$(echo ${FILE} | sed 's/immortalwrt/BashSupnWRT-${{ env.SOURCE_BRANCH }}/')" ;
            echo -e $(readlink -f ${FILE}) ;
            mv "${FILE}" "${newfile}" ;
          done
          [ -f config.buildinfo ] && mv config.buildinfo BashSupnWrt-$SOURCE_BRANCH-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}-config.buildinfo
          [ -f feeds.buildinfo ] && mv feeds.buildinfo BashSupnWrt-$SOURCE_BRANCH-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}-feeds.buildinfo
          [ -f profiles.json ] && mv profiles.json BashSupnWrt-$SOURCE_BRANCH-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}-profiles.json
          [ -f version.buildinfo ] && mv version.buildinfo BashSupnWrt-$SOURCE_BRANCH-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}-version.buildinfo
          [ -f sha256sums ] && mv sha256sums BashSupnWrt-$SOURCE_BRANCH-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}-sha256sums
          df -hT $PWD

      - name: Deploy Files To HostHatch Node
        env:
          HOST: "${{ secrets.REMOTE_USER }}@${{ secrets.HOSTHATCH_IP }}"
          SOURCE_TARGETS: "${{ env.OPENWRT_ROOT_PATH }}/bin/targets/${{ env.DEVICE_TARGET }}/${{ env.DEVICE_SUBTARGET }}/"
          DEST_TARGETS: "${{ env.WEB_ROOT_PATH }}/releases/targets/${{ env.DEVICE_TARGET }}/${{ env.DEVICE_SUBTARGET }}/"
          REMOTE_PRIVATEKEY: "${{ secrets.HOSTHATCH_PRIVATEKEY }}"
        if: env.REMOTE_PRIVATEKEY != null
        run: |
          mkdir -p ~/.ssh/
          install -m 600 /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.HOSTHATCH_PRIVATEKEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh -q -t -i ~/.ssh/id_rsa -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no $HOST \
          bash -c "'mkdir -p $WEB_ROOT_PATH/releases/targets/$DEVICE_TARGET/$DEVICE_SUBTARGET'"
          rsync -chavP --delete -e 'ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no' $SOURCE_TARGETS $HOST:$DEST_TARGETS

      - name: Deploy Files To Backblaze
        env:
          B2_APPLICATION_KEY: "${{ secrets.B2_APPLICATION_KEY }}"
          B2_APPLICATION_KEY_ID: "${{ secrets.B2_APPLICATION_KEY_ID }}"
          SOURCE_TARGETS: "${{ env.OPENWRT_ROOT_PATH }}/bin/targets/${{ env.DEVICE_TARGET }}/${{ env.DEVICE_SUBTARGET }}/"
          DEST_TARGETS: "b2://${{ secrets.B2_BUCKETNAME }}/releases/targets/${{ env.DEVICE_TARGET }}/${{ env.DEVICE_SUBTARGET }}/"
        if: env.B2_APPLICATION_KEY != null && env.B2_APPLICATION_KEY_ID != null
        run: |
          sudo wget -q -O /bin/b2 https://github.com/Backblaze/B2_Command_Line_Tool/releases/latest/download/b2-linux
          sudo chmod +x /bin/b2
          b2 authorize-account $B2_APPLICATION_KEY_ID $B2_APPLICATION_KEY
          b2 sync --noProgress --threads 32 --keepDays 7 --replaceNewer $SOURCE_TARGETS $DEST_TARGETS

      - name: Delete Old Firmware Assets
        if: steps.hash.outputs.REBUILD_TOOLCHAIN == 'true'
        uses: mknejp/delete-release-assets@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ env.SOURCE_BRANCH }}-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}
          fail-if-no-assets: false
          fail-if-no-release: false
          assets: "*"

      - name: Deploy Files To Release
        uses: ncipollo/release-action@v1.8.0
        if: env.FIRMWARE_RELEASE_UPLOAD == 'true'
        with:
          name: BashSupnWRT-${{ env.SOURCE_BRANCH }}-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}
          allowUpdates: true
          replacesArtifacts: true
          tag: ${{ env.SOURCE_BRANCH }}-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}
          body: ${{ env.BUILD_DATE }}
          commit: ${{ env.CURRENT_BRANCH }}
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: ${{ env.OPENWRT_ROOT_PATH }}/bin/targets/${{ env.DEVICE_TARGET }}/${{ env.DEVICE_SUBTARGET }}/*
